// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ks_mobads_api_5.4.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "KsMobadsApi54.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SXLCKsMobadsApi54Root

@implementation SXLCKsMobadsApi54Root

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SXLCKsMobadsApi54Root_FileDescriptor

static GPBFileDescriptor *SXLCKsMobadsApi54Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ks"
                                                 objcPrefix:@"SXLC"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SXLCMobadsRequest

@implementation SXLCMobadsRequest

@dynamic hasRequestId, requestId;
@dynamic hasApiVersion, apiVersion;
@dynamic hasAdslot, adslot;
@dynamic hasApp, app;
@dynamic hasDevice, device;
@dynamic hasNetwork, network;
@dynamic hasGps, gps;
@dynamic hasIsDebug, isDebug;
@dynamic hasRequestProtocolType, requestProtocolType;

typedef struct SXLCMobadsRequest__storage_ {
  uint32_t _has_storage_[1];
  SXLCMobadsRequest_RequestProtocolType requestProtocolType;
  NSString *requestId;
  SXLCVersion *apiVersion;
  SXLCApp *app;
  SXLCDevice *device;
  SXLCNetwork *network;
  SXLCGps *gps;
  SXLCAdSlot *adslot;
} SXLCMobadsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "requestId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCMobadsRequest_FieldNumber_RequestId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, requestId),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "apiVersion",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCVersion),
        .core.number = SXLCMobadsRequest_FieldNumber_ApiVersion,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, apiVersion),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "app",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCApp),
        .core.number = SXLCMobadsRequest_FieldNumber_App,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, app),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "device",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCDevice),
        .core.number = SXLCMobadsRequest_FieldNumber_Device,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, device),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "network",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCNetwork),
        .core.number = SXLCMobadsRequest_FieldNumber_Network,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, network),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "gps",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCGps),
        .core.number = SXLCMobadsRequest_FieldNumber_Gps,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, gps),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "adslot",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCAdSlot),
        .core.number = SXLCMobadsRequest_FieldNumber_Adslot,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, adslot),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "isDebug",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCMobadsRequest_FieldNumber_IsDebug,
        .core.hasIndex = 7,
        .core.offset = 8,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueEnum = SXLCMobadsRequest_RequestProtocolType_HTTPProtocolType,
        .core.name = "requestProtocolType",
        .core.dataTypeSpecific.enumDescFunc = SXLCMobadsRequest_RequestProtocolType_EnumDescriptor,
        .core.number = SXLCMobadsRequest_FieldNumber_RequestProtocolType,
        .core.hasIndex = 9,
        .core.offset = (uint32_t)offsetof(SXLCMobadsRequest__storage_, requestProtocolType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCMobadsRequest class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SXLCMobadsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCMobadsRequest_RequestProtocolType

GPBEnumDescriptor *SXLCMobadsRequest_RequestProtocolType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownProtocolType\000HTTPProtocolType\000HTT"
        "PSProtocolType\000";
    static const int32_t values[] = {
        SXLCMobadsRequest_RequestProtocolType_UnknownProtocolType,
        SXLCMobadsRequest_RequestProtocolType_HTTPProtocolType,
        SXLCMobadsRequest_RequestProtocolType_HTTPSProtocolType,
    };
    static const char *extraTextFormatInfo = "\002\001\004\350\344\000\002\005\350\344\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCMobadsRequest_RequestProtocolType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCMobadsRequest_RequestProtocolType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCMobadsRequest_RequestProtocolType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCMobadsRequest_RequestProtocolType_UnknownProtocolType:
    case SXLCMobadsRequest_RequestProtocolType_HTTPProtocolType:
    case SXLCMobadsRequest_RequestProtocolType_HTTPSProtocolType:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCVersion

@implementation SXLCVersion

@dynamic hasMajor, major;
@dynamic hasMinor, minor;
@dynamic hasMicro, micro;

typedef struct SXLCVersion__storage_ {
  uint32_t _has_storage_[1];
  uint32_t major;
  uint32_t minor;
  uint32_t micro;
} SXLCVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "major",
        .dataTypeSpecific.className = NULL,
        .number = SXLCVersion_FieldNumber_Major,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCVersion__storage_, major),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minor",
        .dataTypeSpecific.className = NULL,
        .number = SXLCVersion_FieldNumber_Minor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCVersion__storage_, minor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "micro",
        .dataTypeSpecific.className = NULL,
        .number = SXLCVersion_FieldNumber_Micro,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCVersion__storage_, micro),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCVersion class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCVersion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCApp

@implementation SXLCApp

@dynamic hasAppId, appId;
@dynamic hasChannelId, channelId;
@dynamic hasAppVersion, appVersion;
@dynamic hasAppPackage, appPackage;

typedef struct SXLCApp__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *channelId;
  SXLCVersion *appVersion;
  NSString *appPackage;
} SXLCApp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCApp_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCApp__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCApp_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCApp__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appVersion",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCVersion),
        .number = SXLCApp_FieldNumber_AppVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCApp__storage_, appVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appPackage",
        .dataTypeSpecific.className = NULL,
        .number = SXLCApp_FieldNumber_AppPackage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCApp__storage_, appPackage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCApp class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCApp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCAdSlot

@implementation SXLCAdSlot

@dynamic hasAdslotId, adslotId;
@dynamic hasAdslotSize, adslotSize;
@dynamic hasVideo, video;
@dynamic hasAdslotType, adslotType;
@dynamic hasAds, ads;

typedef struct SXLCAdSlot__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adslotType;
  uint32_t ads;
  NSString *adslotId;
  SXLCSize *adslotSize;
  SXLCVideo *video;
} SXLCAdSlot__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adslotId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAdSlot_FieldNumber_AdslotId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCAdSlot__storage_, adslotId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adslotSize",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCSize),
        .number = SXLCAdSlot_FieldNumber_AdslotSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCAdSlot__storage_, adslotSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "video",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCVideo),
        .number = SXLCAdSlot_FieldNumber_Video,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCAdSlot__storage_, video),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adslotType",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAdSlot_FieldNumber_AdslotType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCAdSlot__storage_, adslotType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ads",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAdSlot_FieldNumber_Ads,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SXLCAdSlot__storage_, ads),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCAdSlot class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCAdSlot__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCUdId

@implementation SXLCUdId

@dynamic hasIdfa, idfa;
@dynamic hasImei, imei;
@dynamic hasMac, mac;
@dynamic hasAndroidId, androidId;
@dynamic hasIdfaMd5, idfaMd5;
@dynamic hasImeiMd5, imeiMd5;
@dynamic hasAndroididMd5, androididMd5;

typedef struct SXLCUdId__storage_ {
  uint32_t _has_storage_[1];
  NSString *idfa;
  NSString *imei;
  NSString *mac;
  NSString *imeiMd5;
  NSString *androidId;
  NSString *idfaMd5;
  NSString *androididMd5;
} SXLCUdId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idfa",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_Idfa,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, idfa),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imei",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_Imei,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, imei),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mac",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_Mac,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, mac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imeiMd5",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_ImeiMd5,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, imeiMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_AndroidId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, androidId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idfaMd5",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_IdfaMd5,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, idfaMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androididMd5",
        .dataTypeSpecific.className = NULL,
        .number = SXLCUdId_FieldNumber_AndroididMd5,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SXLCUdId__storage_, androididMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCUdId class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCUdId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCSize

@implementation SXLCSize

@dynamic hasWidth, width;
@dynamic hasHeight, height;

typedef struct SXLCSize__storage_ {
  uint32_t _has_storage_[1];
  uint32_t width;
  uint32_t height;
} SXLCSize__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = SXLCSize_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCSize__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = SXLCSize_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCSize__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCSize class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCSize__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCDevice

@implementation SXLCDevice

@dynamic hasDeviceType, deviceType;
@dynamic hasOsType, osType;
@dynamic hasOsVersion, osVersion;
@dynamic hasVendor, vendor;
@dynamic hasModel, model;
@dynamic hasUdid, udid;
@dynamic hasScreenSize, screenSize;

typedef struct SXLCDevice__storage_ {
  uint32_t _has_storage_[1];
  SXLCDevice_DeviceType deviceType;
  SXLCDevice_OsType osType;
  SXLCVersion *osVersion;
  NSData *vendor;
  NSData *model;
  SXLCUdId *udid;
  SXLCSize *screenSize;
} SXLCDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = SXLCDevice_DeviceType_Phone,
        .core.name = "deviceType",
        .core.dataTypeSpecific.enumDescFunc = SXLCDevice_DeviceType_EnumDescriptor,
        .core.number = SXLCDevice_FieldNumber_DeviceType,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, deviceType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = SXLCDevice_OsType_Android,
        .core.name = "osType",
        .core.dataTypeSpecific.enumDescFunc = SXLCDevice_OsType_EnumDescriptor,
        .core.number = SXLCDevice_FieldNumber_OsType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, osType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "osVersion",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCVersion),
        .core.number = SXLCDevice_FieldNumber_OsVersion,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, osVersion),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "vendor",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCDevice_FieldNumber_Vendor,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, vendor),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBytes,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "model",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCDevice_FieldNumber_Model,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, model),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBytes,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "udid",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCUdId),
        .core.number = SXLCDevice_FieldNumber_Udid,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, udid),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "screenSize",
        .core.dataTypeSpecific.className = GPBStringifySymbol(SXLCSize),
        .core.number = SXLCDevice_FieldNumber_ScreenSize,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(SXLCDevice__storage_, screenSize),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCDevice class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SXLCDevice__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCDevice_DeviceType

GPBEnumDescriptor *SXLCDevice_DeviceType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Phone\000Tablet\000";
    static const int32_t values[] = {
        SXLCDevice_DeviceType_Phone,
        SXLCDevice_DeviceType_Tablet,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCDevice_DeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCDevice_DeviceType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCDevice_DeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCDevice_DeviceType_Phone:
    case SXLCDevice_DeviceType_Tablet:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SXLCDevice_OsType

GPBEnumDescriptor *SXLCDevice_OsType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Android\000Ios\000";
    static const int32_t values[] = {
        SXLCDevice_OsType_Android,
        SXLCDevice_OsType_Ios,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCDevice_OsType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCDevice_OsType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCDevice_OsType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCDevice_OsType_Android:
    case SXLCDevice_OsType_Ios:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCNetwork

@implementation SXLCNetwork

@dynamic hasIpv4, ipv4;
@dynamic hasConnectionType, connectionType;
@dynamic hasOperatorType, operatorType;
@dynamic hasCellularId, cellularId;
@dynamic wifiApsArray, wifiApsArray_Count;

typedef struct SXLCNetwork__storage_ {
  uint32_t _has_storage_[1];
  SXLCNetwork_ConnectionType connectionType;
  SXLCNetwork_OperatorType operatorType;
  NSString *ipv4;
  NSString *cellularId;
  NSMutableArray *wifiApsArray;
} SXLCNetwork__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ipv4",
        .dataTypeSpecific.className = NULL,
        .number = SXLCNetwork_FieldNumber_Ipv4,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCNetwork__storage_, ipv4),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectionType",
        .dataTypeSpecific.enumDescFunc = SXLCNetwork_ConnectionType_EnumDescriptor,
        .number = SXLCNetwork_FieldNumber_ConnectionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCNetwork__storage_, connectionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "operatorType",
        .dataTypeSpecific.enumDescFunc = SXLCNetwork_OperatorType_EnumDescriptor,
        .number = SXLCNetwork_FieldNumber_OperatorType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCNetwork__storage_, operatorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cellularId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCNetwork_FieldNumber_CellularId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCNetwork__storage_, cellularId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wifiApsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCWiFiAp),
        .number = SXLCNetwork_FieldNumber_WifiApsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCNetwork__storage_, wifiApsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCNetwork class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCNetwork__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCNetwork_ConnectionType

GPBEnumDescriptor *SXLCNetwork_ConnectionType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ConnectionUnknown\000CellUnknown\000Cell2G\000Cel"
        "l3G\000Cell4G\000Cell5G\000Wifi\000Ethernet\000NewType\000";
    static const int32_t values[] = {
        SXLCNetwork_ConnectionType_ConnectionUnknown,
        SXLCNetwork_ConnectionType_CellUnknown,
        SXLCNetwork_ConnectionType_Cell2G,
        SXLCNetwork_ConnectionType_Cell3G,
        SXLCNetwork_ConnectionType_Cell4G,
        SXLCNetwork_ConnectionType_Cell5G,
        SXLCNetwork_ConnectionType_Wifi,
        SXLCNetwork_ConnectionType_Ethernet,
        SXLCNetwork_ConnectionType_NewType,
    };
    static const char *extraTextFormatInfo = "\004\002d\202\000\003d\202\000\004d\202\000\005d\202\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCNetwork_ConnectionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCNetwork_ConnectionType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCNetwork_ConnectionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCNetwork_ConnectionType_ConnectionUnknown:
    case SXLCNetwork_ConnectionType_CellUnknown:
    case SXLCNetwork_ConnectionType_Cell2G:
    case SXLCNetwork_ConnectionType_Cell3G:
    case SXLCNetwork_ConnectionType_Cell4G:
    case SXLCNetwork_ConnectionType_Cell5G:
    case SXLCNetwork_ConnectionType_Wifi:
    case SXLCNetwork_ConnectionType_Ethernet:
    case SXLCNetwork_ConnectionType_NewType:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SXLCNetwork_OperatorType

GPBEnumDescriptor *SXLCNetwork_OperatorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownOperator\000ChinaMobile\000ChinaTelecom"
        "\000ChinaUnicom\000OtherOperator\000";
    static const int32_t values[] = {
        SXLCNetwork_OperatorType_UnknownOperator,
        SXLCNetwork_OperatorType_ChinaMobile,
        SXLCNetwork_OperatorType_ChinaTelecom,
        SXLCNetwork_OperatorType_ChinaUnicom,
        SXLCNetwork_OperatorType_OtherOperator,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCNetwork_OperatorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCNetwork_OperatorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCNetwork_OperatorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCNetwork_OperatorType_UnknownOperator:
    case SXLCNetwork_OperatorType_ChinaMobile:
    case SXLCNetwork_OperatorType_ChinaTelecom:
    case SXLCNetwork_OperatorType_ChinaUnicom:
    case SXLCNetwork_OperatorType_OtherOperator:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCWiFiAp

@implementation SXLCWiFiAp

@dynamic hasApMac, apMac;
@dynamic hasRssi, rssi;
@dynamic hasApName, apName;
@dynamic hasIsConnected, isConnected;

typedef struct SXLCWiFiAp__storage_ {
  uint32_t _has_storage_[1];
  int32_t rssi;
  NSString *apMac;
  NSData *apName;
} SXLCWiFiAp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "apMac",
        .dataTypeSpecific.className = NULL,
        .number = SXLCWiFiAp_FieldNumber_ApMac,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCWiFiAp__storage_, apMac),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rssi",
        .dataTypeSpecific.className = NULL,
        .number = SXLCWiFiAp_FieldNumber_Rssi,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCWiFiAp__storage_, rssi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "apName",
        .dataTypeSpecific.className = NULL,
        .number = SXLCWiFiAp_FieldNumber_ApName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCWiFiAp__storage_, apName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "isConnected",
        .dataTypeSpecific.className = NULL,
        .number = SXLCWiFiAp_FieldNumber_IsConnected,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCWiFiAp class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCWiFiAp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCGps

@implementation SXLCGps

@dynamic hasCoordinateType, coordinateType;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasTimestamp, timestamp;

typedef struct SXLCGps__storage_ {
  uint32_t _has_storage_[1];
  SXLCGps_CoordinateType coordinateType;
  uint32_t timestamp;
  double longitude;
  double latitude;
} SXLCGps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = SXLCGps_CoordinateType_Wgs84,
        .core.name = "coordinateType",
        .core.dataTypeSpecific.enumDescFunc = SXLCGps_CoordinateType_EnumDescriptor,
        .core.number = SXLCGps_FieldNumber_CoordinateType,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SXLCGps__storage_, coordinateType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueDouble = 0,
        .core.name = "longitude",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCGps_FieldNumber_Longitude,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SXLCGps__storage_, longitude),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeDouble,
      },
      {
        .defaultValue.valueDouble = 0,
        .core.name = "latitude",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCGps_FieldNumber_Latitude,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SXLCGps__storage_, latitude),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeDouble,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "timestamp",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCGps_FieldNumber_Timestamp,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SXLCGps__storage_, timestamp),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCGps class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SXLCGps__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCGps_CoordinateType

GPBEnumDescriptor *SXLCGps_CoordinateType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Wgs84\000Gcj02\000Bd09\000";
    static const int32_t values[] = {
        SXLCGps_CoordinateType_Wgs84,
        SXLCGps_CoordinateType_Gcj02,
        SXLCGps_CoordinateType_Bd09,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCGps_CoordinateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCGps_CoordinateType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCGps_CoordinateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCGps_CoordinateType_Wgs84:
    case SXLCGps_CoordinateType_Gcj02:
    case SXLCGps_CoordinateType_Bd09:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCVideo

@implementation SXLCVideo

@dynamic hasTitle, title;
@dynamic hasContentLength, contentLength;
@dynamic hasCopyright, copyright;

typedef struct SXLCVideo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contentLength;
  SXLCVideo_CopyRight copyright;
  NSData *title;
} SXLCVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = SXLCVideo_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCVideo__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contentLength",
        .dataTypeSpecific.className = NULL,
        .number = SXLCVideo_FieldNumber_ContentLength,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCVideo__storage_, contentLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "copyright",
        .dataTypeSpecific.enumDescFunc = SXLCVideo_CopyRight_EnumDescriptor,
        .number = SXLCVideo_FieldNumber_Copyright,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCVideo__storage_, copyright),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCVideo class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCVideo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCVideo_CopyRight

GPBEnumDescriptor *SXLCVideo_CopyRight_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CrNone\000CrExist\000CrUgc\000CrOther\000";
    static const int32_t values[] = {
        SXLCVideo_CopyRight_CrNone,
        SXLCVideo_CopyRight_CrExist,
        SXLCVideo_CopyRight_CrUgc,
        SXLCVideo_CopyRight_CrOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCVideo_CopyRight)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCVideo_CopyRight_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCVideo_CopyRight_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCVideo_CopyRight_CrNone:
    case SXLCVideo_CopyRight_CrExist:
    case SXLCVideo_CopyRight_CrUgc:
    case SXLCVideo_CopyRight_CrOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCMobadsResponse

@implementation SXLCMobadsResponse

@dynamic hasRequestId, requestId;
@dynamic hasErrorCode, errorCode;
@dynamic adsArray, adsArray_Count;
@dynamic hasExpirationTime, expirationTime;
@dynamic hasSearchKey, searchKey;
@dynamic hasAutomaticPro, automaticPro;
@dynamic adStrategyArray, adStrategyArray_Count;
@dynamic hasRequestTimeS, requestTimeS;

typedef struct SXLCMobadsResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expirationTime;
  NSString *requestId;
  NSMutableArray *adsArray;
  NSString *searchKey;
  NSMutableArray *adStrategyArray;
  uint64_t errorCode;
  double requestTimeS;
} SXLCMobadsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMobadsResponse_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMobadsResponse_FieldNumber_ErrorCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, errorCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCAd),
        .number = SXLCMobadsResponse_FieldNumber_AdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, adsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expirationTime",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMobadsResponse_FieldNumber_ExpirationTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, expirationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "searchKey",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMobadsResponse_FieldNumber_SearchKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, searchKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "automaticPro",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMobadsResponse_FieldNumber_AutomaticPro,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "adStrategyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCAdStrategy),
        .number = SXLCMobadsResponse_FieldNumber_AdStrategyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, adStrategyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "requestTimeS",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMobadsResponse_FieldNumber_RequestTimeS,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SXLCMobadsResponse__storage_, requestTimeS),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCMobadsResponse class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCMobadsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCMetaIndex

@implementation SXLCMetaIndex

@dynamic hasTotalNum, totalNum;
@dynamic hasCurrentIndex, currentIndex;

typedef struct SXLCMetaIndex__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalNum;
  uint32_t currentIndex;
} SXLCMetaIndex__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalNum",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMetaIndex_FieldNumber_TotalNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCMetaIndex__storage_, totalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "currentIndex",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMetaIndex_FieldNumber_CurrentIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCMetaIndex__storage_, currentIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCMetaIndex class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCMetaIndex__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCAd

@implementation SXLCAd

@dynamic hasAdslotId, adslotId;
@dynamic hasAdKey, adKey;
@dynamic metaGroupArray, metaGroupArray_Count;
@dynamic hasHtmlSnippet, htmlSnippet;
@dynamic adTrackingArray, adTrackingArray_Count;
@dynamic hasMobAdtext, mobAdtext;
@dynamic hasMobAdlogo, mobAdlogo;
@dynamic hasVid, vid;

typedef struct SXLCAd__storage_ {
  uint32_t _has_storage_[1];
  NSString *adslotId;
  NSData *htmlSnippet;
  NSString *adKey;
  NSMutableArray *adTrackingArray;
  NSMutableArray *metaGroupArray;
  NSString *mobAdtext;
  NSString *mobAdlogo;
  NSString *vid;
} SXLCAd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adslotId",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAd_FieldNumber_AdslotId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, adslotId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "htmlSnippet",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAd_FieldNumber_HtmlSnippet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, htmlSnippet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "adKey",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAd_FieldNumber_AdKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, adKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adTrackingArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCTracking),
        .number = SXLCAd_FieldNumber_AdTrackingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, adTrackingArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metaGroupArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCMaterialMeta),
        .number = SXLCAd_FieldNumber_MetaGroupArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, metaGroupArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mobAdtext",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAd_FieldNumber_MobAdtext,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, mobAdtext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobAdlogo",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAd_FieldNumber_MobAdlogo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, mobAdlogo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vid",
        .dataTypeSpecific.className = NULL,
        .number = SXLCAd_FieldNumber_Vid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SXLCAd__storage_, vid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCAd class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCAd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SXLCMaterialMeta

@implementation SXLCMaterialMeta

@dynamic hasCreativeType, creativeType;
@dynamic hasInteractionType, interactionType;
@dynamic winNoticeURLArray, winNoticeURLArray_Count;
@dynamic hasClickURL, clickURL;
@dynamic hasTitle, title;
@dynamic hasBrandName, brandName;
@dynamic descriptionArray, descriptionArray_Count;
@dynamic iconSrcArray, iconSrcArray_Count;
@dynamic imageSrcArray, imageSrcArray_Count;
@dynamic hasAppPackage, appPackage;
@dynamic hasAppSize, appSize;
@dynamic hasVideoURL, videoURL;
@dynamic hasVideoDuration, videoDuration;
@dynamic hasMetaIndex, metaIndex;
@dynamic hasMaterialWidth, materialWidth;
@dynamic hasMaterialHeight, materialHeight;

typedef struct SXLCMaterialMeta__storage_ {
  uint32_t _has_storage_[1];
  SXLCMaterialMeta_CreativeType creativeType;
  SXLCMaterialMeta_InteractionType interactionType;
  uint32_t appSize;
  uint32_t videoDuration;
  uint32_t materialWidth;
  uint32_t materialHeight;
  NSMutableArray *winNoticeURLArray;
  NSString *clickURL;
  NSData *title;
  NSMutableArray *descriptionArray;
  NSMutableArray *iconSrcArray;
  NSMutableArray *imageSrcArray;
  NSString *appPackage;
  NSString *videoURL;
  SXLCMetaIndex *metaIndex;
  NSString *brandName;
} SXLCMaterialMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creativeType",
        .dataTypeSpecific.enumDescFunc = SXLCMaterialMeta_CreativeType_EnumDescriptor,
        .number = SXLCMaterialMeta_FieldNumber_CreativeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, creativeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "interactionType",
        .dataTypeSpecific.enumDescFunc = SXLCMaterialMeta_InteractionType_EnumDescriptor,
        .number = SXLCMaterialMeta_FieldNumber_InteractionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, interactionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "winNoticeURLArray",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_WinNoticeURLArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, winNoticeURLArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clickURL",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_ClickURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, clickURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "descriptionArray",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_DescriptionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, descriptionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "iconSrcArray",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_IconSrcArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, iconSrcArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageSrcArray",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_ImageSrcArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, imageSrcArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appPackage",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_AppPackage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, appPackage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appSize",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_AppSize,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, appSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "videoURL",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_VideoURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, videoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoDuration",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_VideoDuration,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, videoDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "metaIndex",
        .dataTypeSpecific.className = GPBStringifySymbol(SXLCMetaIndex),
        .number = SXLCMaterialMeta_FieldNumber_MetaIndex,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, metaIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "materialWidth",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_MaterialWidth,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, materialWidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "materialHeight",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_MaterialHeight,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, materialHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "brandName",
        .dataTypeSpecific.className = NULL,
        .number = SXLCMaterialMeta_FieldNumber_BrandName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SXLCMaterialMeta__storage_, brandName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCMaterialMeta class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCMaterialMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\000win_notice_url\000\004\005\241!!\000\013\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCMaterialMeta_CreativeType

GPBEnumDescriptor *SXLCMaterialMeta_CreativeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NoType\000Text\000Image\000TextIcon\000Video\000VideoHt"
        "ml\000";
    static const int32_t values[] = {
        SXLCMaterialMeta_CreativeType_NoType,
        SXLCMaterialMeta_CreativeType_Text,
        SXLCMaterialMeta_CreativeType_Image,
        SXLCMaterialMeta_CreativeType_TextIcon,
        SXLCMaterialMeta_CreativeType_Video,
        SXLCMaterialMeta_CreativeType_VideoHtml,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCMaterialMeta_CreativeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCMaterialMeta_CreativeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCMaterialMeta_CreativeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCMaterialMeta_CreativeType_NoType:
    case SXLCMaterialMeta_CreativeType_Text:
    case SXLCMaterialMeta_CreativeType_Image:
    case SXLCMaterialMeta_CreativeType_TextIcon:
    case SXLCMaterialMeta_CreativeType_Video:
    case SXLCMaterialMeta_CreativeType_VideoHtml:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SXLCMaterialMeta_InteractionType

GPBEnumDescriptor *SXLCMaterialMeta_InteractionType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NoInteraction\000Surfing\000Download\000Optional\000";
    static const int32_t values[] = {
        SXLCMaterialMeta_InteractionType_NoInteraction,
        SXLCMaterialMeta_InteractionType_Surfing,
        SXLCMaterialMeta_InteractionType_Download,
        SXLCMaterialMeta_InteractionType_Optional,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCMaterialMeta_InteractionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCMaterialMeta_InteractionType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCMaterialMeta_InteractionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCMaterialMeta_InteractionType_NoInteraction:
    case SXLCMaterialMeta_InteractionType_Surfing:
    case SXLCMaterialMeta_InteractionType_Download:
    case SXLCMaterialMeta_InteractionType_Optional:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCTracking

@implementation SXLCTracking

@dynamic hasTrackingEvent, trackingEvent;
@dynamic trackingURLArray, trackingURLArray_Count;

typedef struct SXLCTracking__storage_ {
  uint32_t _has_storage_[1];
  SXLCTracking_TrackingEvent trackingEvent;
  NSMutableArray *trackingURLArray;
} SXLCTracking__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trackingEvent",
        .dataTypeSpecific.enumDescFunc = SXLCTracking_TrackingEvent_EnumDescriptor,
        .number = SXLCTracking_FieldNumber_TrackingEvent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SXLCTracking__storage_, trackingEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trackingURLArray",
        .dataTypeSpecific.className = NULL,
        .number = SXLCTracking_FieldNumber_TrackingURLArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SXLCTracking__storage_, trackingURLArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCTracking class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SXLCTracking__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000tracking_url\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCTracking_TrackingEvent

GPBEnumDescriptor *SXLCTracking_TrackingEvent_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "AdClick\000AdExposure\000AdClose\000VideoAdStart\000"
        "VideoAdFullScreen\000VideoAdEnd\000VideoAdStar"
        "tCardClick\000VideoAdClose\000AppAdDownload\000Ap"
        "pAdInstall\000AppAdActive\000AppAdStartDownloa"
        "d\000";
    static const int32_t values[] = {
        SXLCTracking_TrackingEvent_AdClick,
        SXLCTracking_TrackingEvent_AdExposure,
        SXLCTracking_TrackingEvent_AdClose,
        SXLCTracking_TrackingEvent_VideoAdStart,
        SXLCTracking_TrackingEvent_VideoAdFullScreen,
        SXLCTracking_TrackingEvent_VideoAdEnd,
        SXLCTracking_TrackingEvent_VideoAdStartCardClick,
        SXLCTracking_TrackingEvent_VideoAdClose,
        SXLCTracking_TrackingEvent_AppAdDownload,
        SXLCTracking_TrackingEvent_AppAdInstall,
        SXLCTracking_TrackingEvent_AppAdActive,
        SXLCTracking_TrackingEvent_AppAdStartDownload,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCTracking_TrackingEvent)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCTracking_TrackingEvent_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCTracking_TrackingEvent_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCTracking_TrackingEvent_AdClick:
    case SXLCTracking_TrackingEvent_AdExposure:
    case SXLCTracking_TrackingEvent_AdClose:
    case SXLCTracking_TrackingEvent_VideoAdStart:
    case SXLCTracking_TrackingEvent_VideoAdFullScreen:
    case SXLCTracking_TrackingEvent_VideoAdEnd:
    case SXLCTracking_TrackingEvent_VideoAdStartCardClick:
    case SXLCTracking_TrackingEvent_VideoAdClose:
    case SXLCTracking_TrackingEvent_AppAdDownload:
    case SXLCTracking_TrackingEvent_AppAdInstall:
    case SXLCTracking_TrackingEvent_AppAdActive:
    case SXLCTracking_TrackingEvent_AppAdStartDownload:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SXLCAdStrategy

@implementation SXLCAdStrategy

@dynamic hasAppId, appId;
@dynamic hasAdslotId, adslotId;
@dynamic hasChannelType, channelType;
@dynamic hasWeight, weight;

typedef struct SXLCAdStrategy__storage_ {
  uint32_t _has_storage_[1];
  SXLCAdStrategy_ChannelType channelType;
  uint32_t weight;
  NSString *appId;
  NSString *adslotId;
} SXLCAdStrategy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "appId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCAdStrategy_FieldNumber_AppId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SXLCAdStrategy__storage_, appId),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "adslotId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCAdStrategy_FieldNumber_AdslotId,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SXLCAdStrategy__storage_, adslotId),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = SXLCAdStrategy_ChannelType_ChannelVung,
        .core.name = "channelType",
        .core.dataTypeSpecific.enumDescFunc = SXLCAdStrategy_ChannelType_EnumDescriptor,
        .core.number = SXLCAdStrategy_FieldNumber_ChannelType,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SXLCAdStrategy__storage_, channelType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "weight",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SXLCAdStrategy_FieldNumber_Weight,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SXLCAdStrategy__storage_, weight),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SXLCAdStrategy class]
                                     rootClass:[SXLCKsMobadsApi54Root class]
                                          file:SXLCKsMobadsApi54Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SXLCAdStrategy__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003G\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SXLCAdStrategy_ChannelType

GPBEnumDescriptor *SXLCAdStrategy_ChannelType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ChannelVung\000ChannelUnit\000ChannelKs\000";
    static const int32_t values[] = {
        SXLCAdStrategy_ChannelType_ChannelVung,
        SXLCAdStrategy_ChannelType_ChannelUnit,
        SXLCAdStrategy_ChannelType_ChannelKs,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SXLCAdStrategy_ChannelType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SXLCAdStrategy_ChannelType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SXLCAdStrategy_ChannelType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SXLCAdStrategy_ChannelType_ChannelVung:
    case SXLCAdStrategy_ChannelType_ChannelUnit:
    case SXLCAdStrategy_ChannelType_ChannelKs:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
